api routes:
1. GET api/future_flight
possible query parameters:
	source_city
	source_airport
	destination_city
	destination_airport
	departure_date
	return_date

feature:
NO AUTHENTICATION
either source_city or source_airport should exist, cannot have both, same for destination.
departure date is required, return date is optional
return all flights fulfill the condition specified

return object structure:
{
	flights: [
		{
			to: {
				airline_name,
				flight_number,
				departure_date,
				departure_time,
				departure_airport_code,
				arrival_date,
				arrival_time,
				arrival_airport_code,
				base_price,
				airplane: {
					id,
					seat_number,
					manufacturing_company,
					manufacturing_date,
					age
				}
			},
			(if return_date is specified) from: {
				airline_name,
				flight_number,
				departure_date,
				departure_time,
				departure_airport_code,
				arrival_date,
				arrival_time,
				arrival_airport_code,
				base_price,
				airplane: {
					id,
					seat_number,
					manufacturing_company,
					manufacturing_date,
					age
				}
			}
		}
	]
}

2. GET api/flight_status
possible query parameters:
	airline_name
	flight_number
	arrival_date
	departure_date

feature:
NO AUTHENTICATION
return the status of the flight based on information given

return object structure:
{
	airline_name,
	flight_number,
	departure_date,
	departure_time,
	departure_airport_code,
	arrival_date,
	arrival_time,
	arrival_airport_code,
	base_price,
	status,
	airplane: {
		id,
		seat_number,
		manufacturing_company,
		manufacturing_date,
		age
	}
}

3. POST api/register
possible body parameters:
{
	register_type (either 'customer' or 'staff')
	// if type is customer
	name: {
		first_name
		last_name
	}
	email
	password
	address: {
		building_number
		street_name
		apartment_number
		city
		state
		zip_code
	}
	phone_numbers: [array]
	passport: {
		number
		expiration
		country
	}
	date_of_birth

	// if type is staff
	username
	password
	name: {
		first_name
		last_name
	}
	date_of_birth
	airline
	phone_numbers: [array]
	emails: [array]
}

feature:
register the new user

return object structure:
{
	msg: either "success" or "failed"
}

3. POST api/login
possible body parameters:
{
	user_type: (either 'customer' or 'staff')
	username
	password
}

feature:
login the user in

return object structure: (together with session data)
{
	msg: either "success" or "failed"
}

4. POST api/scheduled_flights
possible body parameters:
{
	email
	start_date
	end_date
	destination_city
	destination_airport
	source_city
	source_airport
}

feature:
NEEDS AUTHENTICATE
return all future flights the user have scheduled

return object structure:
{
	flights: [
		{
			airline_name,
			flight_number,
			departure_date,
			departure_time,
			departure_airport_code,
			arrival_date,
			arrival_time,
			arrival_airport_code,
			base_price,
			status,
			airplane: {
				id,
				seat_number,
				manufacturing_company,
				manufacturing_date,
				age
			}
		}
	]
}

5. GET api/ticket_price
possible query parameters:
	airline_name
	flight_number
	arrival_date
	departure_date

feature:
NO AUTHENTICATION
return the calculated ticket price

return object structure:
{
	calculated_price
}
	

6. POST api/purchase_ticket
possible body parameters:
{
	type (either 'one-way' or 'round-trip')
	email
	card_type
	card_number
	card_name
	expiration_date

	//if type is one-way
	airline_name
	flight_number
	arrival_date
	departure_date

	//if type is round-trip
	to: {
		airline_name
		flight_number
		arrival_date
		departure_date
	}
	back: {
		airline_name
		flight_number
		arrival_date
		departure_date
	}
}

feature:
NEEDS AUTHENTICATION
register tickets for the user
if type is round-trip, registration should cancel if either ticket registration is failed

return object structure:
{
	msg: either 'success' or 'failed'
}

7. POST api/cancel_ticket
possible body parameters:
{
	email
	airline_name
	flight_number
	arrival_date
	departure_date
}

feature:
NEEDS AUTHENTICATION
cancel the ticket user registered

return object structure:
{
	msg: either 'success' or 'failed'
}

8. POST api/comment
possible body parameters:
{
	email
	airline_name
	flight_number
	arrival_date
	departure_date
	rating
	comment
}

feature:
NEEDS AUTHENTICATION
create comments for the flight

return object structure:
{
	msg: either 'success' or 'failed'
}

9. GET api/comment
NO AUTHENTICATION
possible query parameters:
	airline_name

feature:
return all comments to flights which belong to the airline

return object structure:
{
	comments: [
		{
			comment,
			rating
		}
	]
}

10. GET api/spending
no parameter

feature:
NEEDS AUTHENTICATION
return all flight costs in the past year

return object structure:
{
	flights: [
		{
			date,
			cost
		}
	]
}

11. POST api/logout
no body parameter

feature:
log user out

return object structure:
{
	msg: either 'success' or 'failed'
}

12. GET api/flights
possible query parameters:
	airline
	start_date
	end_date
	source_city
	source_airport
	destination_city
	destination_airport

feature:
NEEDS AUTHENTICATION
return all flights based on query result

return object structure:
{
	flights: [
		airline_name,
		flight_number,
		departure_date,
		departure_time,
		departure_airport_code,
		arrival_date,
		arrival_time,
		arrival_airport_code,
		base_price,
		airplane: {
			id,
			seat_number,
			manufacturing_company,
			manufacturing_date,
			age
		}
	]
}

13. GET api/flight_customers
possible query parameters:
	airline_name
	flight_number
	arrival_date
	departure_date

feature:
NEEDS AUTHENTICATION
return all customer who registered for the flight

return object structure:
{
	customers: [
		{
			email,
			first_name,
			last_name,
			purchased_date
		}
	]
}

14. POST api/new_flight
possible body parameters:
{
	airline_name,
	flight_number,
	departure_date,
	departure_time,
	departure_airport_code,
	arrival_date,
	arrival_time,
	arrival_airport_code,
	base_price,
	airplane_id
}

feature:
NEEDS AUTHENTICATION
create a new flight

return object structure:
{
	msg: either 'success' or 'failed'
}

15. POST api/flight_status
possible body parameters:
{
	status
	airline_name
	flight_number
	arrival_date
	departure_date
}

feature:
NEEDS AUTHENTICATION
change the status of the flight

return object structure:
{
	msg: either 'success' or 'failed'
}

16. POST api/airplane
possible body parameters:
{
	airline_name,
	ID,
	seat_number,
	manufacturing_company,
	manufacturing_date,
	age
}

feature:
NEEDS AUTHENTICATION
create a new airplane

return object structure:
{
	msg: either 'success' or 'failed'
}

17. GET api/airplane
possible query parameters:
	airline

feature:
NEEDS AUTHENTICATION
return airplanes that belong to the airline

return object structure:
{
	airplanes: [
		{
			airline_name,
			ID,
			seat_number,
			manufacturing_company,
			manufacturing_date,
			age
		}
	]
}

18. POST api/airport
possible body parameters:
{
	code,
	name,
	city,
	country,
	airport_type
}

feature:
NEEDS AUTHENTICATION
create a new airport

return object structure:
{
	msg: either 'success' or 'failed'
}

19. GET api/flight_rating
possible query parameters:
	airline_name
	flight_number
	arrival_date
	departure_date

feature:
NEEDS AUTHENTICATION
return all comments of this flight

return object structure:
{
	comments: [
		comment,
		rating
	]
}

20. GET api/customer
possible query parameters:
	airline,

feature:
NEEDS AUTHENTICATION
return all flights of that specific airline of all customers

return object structure:
{
	customers: [
		{
			email,
			first_name,
			last_name,
			flights: [
				{
					airline_name,
					flight_number,
					departure_date,
					departure_time,
					departure_airport_code,
					arrival_date,
					arrival_time,
					arrival_airport_code,
					base_price,
					airplane: {
						id,
						seat_number,
						manufacturing_company,
						manufacturing_date,
						age
					}
				}
			]
		}
	]
}

21. GET api/tickets
possible query parameters:
	start_date
	end_date

feature:
NEEDS AUTHENTICATION
return all tickets of the airline sold within the range

return object structure:
{
	tickets: [
		{
			airline_name,
			flight_number,
			departure_date,
			departure_time,
			email,
			purchased_date,
			purchased_time,
			calculated_price
		}
	]
}







